.imageWrapper {
  width: 100%;
  height: 100%;
  overflow: hidden;
  img {
    min-width: 100%;
    max-width: 100%;
    object-fit: cover;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  &.fitContain {
    img {
      min-width: initial;
      min-height: initial;
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
    }
  }
}

figure {
  margin: 0;
}
.rounded {
  border-radius: 10px;
}
.noteText {
  font-family: "GilroySemibold";
  font-size: 18px;
  line-height: 35px;
  max-width: 1200px;
  margin: 0 auto;

  a {
    position: relative;
    &:after {
      content: "";
      width: 100%;
      border-bottom: 1px solid;
      position: absolute;
      bottom: -1px;
      left: 0;
      transition: all 0.3s linear;
    }
    @media screen and (min-width: 992px) {
      &:hover {
        &:after {
          width: 0;
        }
      }
    }
  }
}
.text-center {
  text-align: center;
}

@for $i from 1 through 12 {
  .line-clamp-#{$i} {
    display: -webkit-box;
    overflow: hidden;
    -moz-box-orient: vertical;
    -webkit-line-clamp: $i;
  }
}

// Kullanacağımız yüzdelik değerler
$sizes: 25, 50, 75, 100;
$breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl:1200px,
  xxl:1440px,
  xxxl:1600px
);

@each $name, $size in $breakpoints {
  @media (min-width: $size) {
    @each $s in $sizes {
      .w-#{$name}-#{$s} {width: #{"#{$s}%"} !important;}
      .min-w-#{$name}-#{$s} {min-width: #{"#{$s}%"} !important;}
      .max-w-#{$name}-#{$s} {max-width: #{"#{$s}%"} !important;}

      .h-#{$name}-#{$s}     { height: #{"#{$s}%"} !important; }
      .min-h-#{$name}-#{$s} { min-height: #{"#{$s}%"} !important; }
      .max-h-#{$name}-#{$s} { max-height: #{"#{$s}%"} !important; }
    }
  }
}

//padding ve margin ozellikleri
$directions: t top, e right, bt bottom, s left;
$step: 4px;

@each $short, $full in $directions {
  @for $i from 0 through 12 {
    .p#{$short}-#{$i}{
      padding-#{$full}:$i * $step!important;
    }
  }
}
@each $short, $full in $directions {
  @for $i from 0 through 12 {
    .m#{$short}-#{$i}{
      margin-#{$full}:$i * $step!important;
    }
  }
}
@for $i from 1 through 12 {
  .p-#{$i} {
    padding: $i * $step !important;
  }
}
@for $i from 1 through 12 {
  .py-#{$i} {
    padding-top: $i * $step !important;
    padding-bottom: $i * $step !important;
  }
}
@for $i from 1 through 12 {
  .px-#{$i} {
    padding-left: $i * $step !important;
    padding-right: $i * $step !important;
  }
}

@for $i from 1 through 12 {
  .m-#{$i} {
    margin: $i * $step !important;
  }
}
@for $i from 1 through 12 {
  .mx-#{$i} {
    margin-left: $i * $step !important;
    margin-right: $i * $step !important;
  }
}
@for $i from 1 through 12 {
  .my-#{$i} {
    margin-top: $i * $step !important;
    margin-bottom: $i * $step !important;
  }
}
.mx-auto{
  margin-left: auto!important;
  margin-right: auto!important;
}

.pb {
  padding-block: 35px;
}
.pb-2 {
  padding-block: 60px;
}
.pi {
  padding-inline: 70px;
}
.pi-2 {
  padding-inline: 100px;
}

//display ozellikleri
$displays: block inline inline-block flex inline-flex grid inline-grid table table-cell none;
@each $d in $displays {
  .d-#{$d} {
    display: #{$d} !important;
  }
}

//display:flex ozellıklerı
$flex-displays: flex inline-flex;

@each $fd in $flex-displays {
  .d-#{$fd} {
    display: #{$fd} !important;
  }
}
$directions: row row-reverse column column-reverse;

@each $dir in $directions {
  .flex-#{$dir} {
    flex-direction: #{$dir} !important;
  }
}
/* === Flex wrap === */
$wraps: nowrap wrap wrap-reverse;

@each $wrap in $wraps {
  .flex-#{$wrap} {
    flex-wrap: #{$wrap} !important;
  }
}

/* === Justify content === */
$justify: start end center between around evenly;

@each $j in $justify {
  .justify-#{$j} {
    justify-content: #{$j} !important;
  }
}

/* === Align items === */
$align-items: start end center stretch baseline;

@each $ai in $align-items {
  .items-#{$ai} {
    align-items: #{$ai} !important;
  }
}

/* === Align content === */
$align-content: start end center between around stretch;

@each $ac in $align-content {
  .content-#{$ac} {
    align-content: #{$ac} !important;
  }
}

/* === Align self (for child elements) === */
$align-self: auto start end center stretch baseline;

@each $as in $align-self {
  .self-#{$as} {
    align-self: #{$as} !important;
  }
}

/* === Flex grow & shrink (0 veya 1) === */
@for $i from 0 through 1 {
  .flex-grow-#{$i}   { flex-grow: #{$i} !important; }
  .flex-shrink-#{$i} { flex-shrink: #{$i} !important; }
}

.deg180{
  transform: rotate(180deg);
  transform-origin: center calc(50% - 1px);
}

