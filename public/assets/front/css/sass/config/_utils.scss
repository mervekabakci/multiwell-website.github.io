@use "sass:string";
@use "sass:list";

.imageWrapper {
  width: 100%;
  height: 100%;
  overflow: hidden;
  img {
    min-width: 100%;
    max-width: 100%;
    min-height: 100%;
    object-fit: cover;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  &.fitContain {
    img {
      min-width: initial;
      min-height: initial;
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
    }
  }
}

.playButton {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  color: var(--fifth);
  gap: 10px;
  font-family: "GilroySemibold";
  font-size: 15px;
  margin-top: auto;
  padding-top: 20px;
  position: relative;
  .icon-play {
    font-size: 8px;
    padding-left: 2px;
    padding-top: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid var(--fifth);
    border-radius: 100%;
    width: 24px;
    min-width: 24px;
    height: 24px;
    position: relative;
  }
}

figure {
  margin: 0;
}
.rounded {
  border-radius: 10px;
}
.noteText {
  font-family: "GilroySemibold";
  font-size: 18px;
  line-height: 35px;
  max-width: 1200px;
  margin: 0 auto;
  @media screen and (max-width: 991.98px) {
    font-size: 16px;
    line-height: 22px;
  }

  a {
    position: relative;
    &:after {
      content: "";
      width: 100%;
      border-bottom: 1px solid;
      position: absolute;
      bottom: -1px;
      left: 0;
      transition: all 0.3s linear;
    }
    @media screen and (min-width: 992px) {
      &:hover {
        &:after {
          width: 0;
        }
      }
    }
  }
}
.text-center {
  text-align: center;
}
.overflow-hidden {
  overflow: hidden;
}

@for $i from 1 through 12 {
  .line-clamp-#{$i} {
    display: -webkit-box;
    overflow: hidden;
    -moz-box-orient: vertical;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $i;
  }
}

// -----------------------------
//  VARIABLES
// -----------------------------
$sizes: 25, 50, 75, 100;
$breakpoints: (
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1440px,
  xxxl: 1600px,
);

// Spacing directions (padding/margin)
$spacing-directions: (t top, e right, bt bottom, s left);

// Display list
$displays: block inline inline-block flex inline-flex grid inline-grid table
  table-cell none;

// Flex directions / wrap
$flex-directions: (row row-reverse column column-reverse);
$wraps: (nowrap wrap wrap-reverse);

// Mapping for justify/align so CSS değerleri net olsun
$justify-map: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly,
);

$align-items-map: (
  start: flex-start,
  end: flex-end,
  center: center,
  stretch: stretch,
  baseline: baseline,
);

$align-content-map: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  stretch: stretch,
);

$align-self-map: (
  auto: auto,
  start: flex-start,
  end: flex-end,
  center: center,
  stretch: stretch,
  baseline: baseline,
);

// -----------------------------
//  WIDTH/HEIGHT UTILITIES
//  (global)
// -----------------------------
@each $s in $sizes {
  .w-#{$s} {
    width: string.unquote("#{$s}%") !important;
  }
  .min-w-#{$s} {
    min-width: string.unquote("#{$s}%") !important;
  }
  .max-w-#{$s} {
    max-width: string.unquote("#{$s}%") !important;
  }

  .h-#{$s} {
    height: string.unquote("#{$s}%") !important;
  }
  .min-h-#{$s} {
    min-height: string.unquote("#{$s}%") !important;
  }
  .max-h-#{$s} {
    max-height: string.unquote("#{$s}%") !important;
  }
}
.h-auto {
  height: auto !important;
}
.w-auto {
  width: auto !important;
}
// -----------------------------
//  WIDTH/HEIGHT UTILITIES
//  (breakpoint'li)
// -----------------------------
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $s in $sizes {
      .w-#{$name}-#{$s} {
        width: string.unquote("#{$s}%") !important;
      }
      .min-w-#{$name}-#{$s} {
        min-width: string.unquote("#{$s}%") !important;
      }
      .max-w-#{$name}-#{$s} {
        max-width: string.unquote("#{$s}%") !important;
      }

      .h-#{$name}-#{$s} {
        height: string.unquote("#{$s}%") !important;
      }
      .min-h-#{$name}-#{$s} {
        min-height: string.unquote("#{$s}%") !important;
      }
      .max-h-#{$name}-#{$s} {
        max-height: string.unquote("#{$s}%") !important;
      }
    }
  }
}

// -----------------------------
//  DISPLAY UTILITIES (global + breakpoints)
// -----------------------------
@each $d in $displays {
  .d-#{$d} {
    display: #{$d} !important;
  }
}
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $d in $displays {
      .d-#{$name}-#{$d} {
        display: #{$d} !important;
      }
    }
  }
}

// -----------------------------
//  FLEX DIRECTION & WRAP (global + breakpoints)
// -----------------------------
@each $dir in $flex-directions {
  .flex-#{$dir} {
    flex-direction: #{$dir} !important;
  }
}
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $dir in $flex-directions {
      .flex-#{$name}-#{$dir} {
        flex-direction: #{$dir} !important;
      }
    }
  }
}

@each $wrap in $wraps {
  .flex-#{$wrap} {
    flex-wrap: #{$wrap} !important;
  }
}
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $wrap in $wraps {
      .flex-#{$name}-#{$wrap} {
        flex-wrap: #{$wrap} !important;
      }
    }
  }
}
// -----------------------------
//  JUSTIFY / ALIGN ITEMS / ALIGN CONTENT / ALIGN SELF
//  (maps => doğru CSS değerleri)
// -----------------------------
@each $key, $val in $justify-map {
  .justify-#{$key} {
    justify-content: $val !important;
  }
}
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $key, $val in $justify-map {
      .justify-#{$name}-#{$key} {
        justify-content: $val !important;
      }
    }
  }
}

@each $key, $val in $align-items-map {
  .items-#{$key} {
    align-items: $val !important;
  }
}
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $key, $val in $align-items-map {
      .items-#{$name}-#{$key} {
        align-items: $val !important;
      }
    }
  }
}

@each $key, $val in $align-content-map {
  .content-#{$key} {
    align-content: $val !important;
  }
}
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $key, $val in $align-content-map {
      .content-#{$name}-#{$key} {
        align-content: $val !important;
      }
    }
  }
}

@each $key, $val in $align-self-map {
  .self-#{$key} {
    align-self: $val !important;
  }
}
@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @each $key, $val in $align-self-map {
      .self-#{$name}-#{$key} {
        align-self: $val !important;
      }
    }
  }
}

// -----------------------------
//  FLEX GROW / SHRINK
// -----------------------------
@for $i from 0 through 1 {
  .flex-grow-#{$i} {
    flex-grow: $i !important;
  }
  .flex-shrink-#{$i} {
    flex-shrink: $i !important;
  }
}

// -----------------------------
//  SPACING (padding / margin)
// -----------------------------
$step: 4px;

// Padding block
.pb {
  padding-block: 35px;
}
.pb-2 {
  padding-block: 60px;
}

@media screen and (max-width: 991.98px) {
  .pb,
  .pb-2 {
    padding-block: 30px;
  }
}

@media screen and (max-width: 480px) {
  .pb,
  .pb-2 {
    padding-block: 16px;
  }
}

// Padding inline
.pi {
  padding-inline: 70px;
}
.pi-2 {
  padding-inline: 100px;
}

@media screen and (max-width: 1600px) {
  .pi,
  .pi-2 {
    padding-inline: 50px;
  }
}

@media screen and (max-width: 1280px) {
  .pi,
  .pi-2 {
    padding-inline: 30px;
  }
}

@media screen and (max-width: 480px) {
  .pi,
  .pi-2 {
    padding-inline: 16px;
  }
}

// Eğer ekstra md/ lg varyant lazım olursa:
.pi-md {
  padding-inline: 0;
} // örnek, sadece tablet
.pi-lg {
  padding-inline: 70px;
} // örnek, sadece desktop

@for $i from 1 through 24 {
  .p-#{$i} {
    padding: $i * $step !important;
  }
  .py-#{$i} {
    padding-top: $i * $step !important;
    padding-bottom: $i * $step !important;
  }
  .px-#{$i} {
    padding-left: $i * $step !important;
    padding-right: $i * $step !important;
  }
  .m-#{$i} {
    margin: $i * $step !important;
  }
  .mx-#{$i} {
    margin-left: $i * $step !important;
    margin-right: $i * $step !important;
  }
  .my-#{$i} {
    margin-top: $i * $step !important;
    margin-bottom: $i * $step !important;
  }
}

@each $name, $bp in $breakpoints {
  @media (min-width: $bp) {
    @for $i from 0 through 24 {
      .p-#{$name}-#{$i} {
        padding: $i * $step !important;
      }
      .px-#{$name}-#{$i} {
        padding-left: $i * $step !important;
        padding-right: $i * $step !important;
      }
      .py-#{$name}-#{$i} {
        padding-top: $i * $step !important;
        padding-bottom: $i * $step !important;
      }
      .m-#{$name}-#{$i} {
        margin: $i * $step !important;
      }
      .mx-#{$name}-#{$i} {
        margin-left: $i * $step !important;
        margin-right: $i * $step !important;
      }
      .my-#{$name}-#{$i} {
        margin-top: $i * $step !important;
        margin-bottom: $i * $step !important;
      }

      @each $pair in $spacing-directions {
        $short: list.nth($pair, 1);
        $full: list.nth($pair, 2);
        .p#{$short}-#{$name}-#{$i} {
          padding-#{$full}: $i * $step !important;
        }
        .m#{$short}-#{$name}-#{$i} {
          margin-#{$full}: $i * $step !important;
        }
      }
    }
  }
}
@each $pair in $spacing-directions {
  $short: list.nth($pair, 1);
  $full: list.nth($pair, 2);
  @for $i from 0 through 24 {
    .p#{$short}-#{$i} {
      padding-#{$full}: $i * $step !important;
    }
    .m#{$short}-#{$i} {
      margin-#{$full}: $i * $step !important;
    }
  }
}

.mx-auto {
  margin-left: auto !important;
  margin-right: auto !important;
}
.my-auto {
  margin-top: auto !important;
  margin-bottom: auto !important;
}
.ms-auto {
  margin-left: auto !important;
}
.me-auto {
  margin-right: auto !important;
}
.mt-auto {
  margin-top: auto !important;
}
.mbt-auto {
  margin-bottom: auto !important;
}
.mb-0 {
  margin-block: 0 !important;
}

.deg180 {
  transform: rotate(180deg);
  transform-origin: center calc(50% - 1px);
}
